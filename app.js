\nconst express = require(\'express\');\nconst path = require(\'path\');\nconst i18n = require(\'i18n\');\nconst logger = require(\'./config/logger\');\nconst session = require(\'express-session\');\nconst { getSetting } = require(\'./config/settingsManager\');\nconst { initializeSchema } = require(\'./config/typesenseManager\');\nconst { setActivePage } = require(\'./config/middleware\');\n\ni18n.configure({\n  locales: [\'en\', \'id\', \'pt\'],\n  directory: path.join(__dirname, \'locales\'),\n  defaultLocale: \'pt\',\n  cookie: \'i18n\',\n  autoReload: true,\n  objectNotation: true,\n});\n\nconst app = express();\n\ninitializeSchema();\n\napp.use(express.json({ limit: \'10mb\' }));\napp.use(express.urlencoded({ extended: true, limit: \'10mb\' }));\n\napp.use(\'/public\', express.static(path.join(__dirname, \'public\'), {\n  maxAge: \'1h\',\n  etag: true\n}));\n\napp.use(session({\n  secret: getSetting(\'session_secret\', \'a-very-secret-key\'),\n  resave: false,\n  saveUninitialized: false,\n  cookie: { \n    secure: process.env.NODE_ENV === \'production\',\n    maxAge: 24 * 60 * 60 * 1000,\n    httpOnly: true\n  },\n  name: \'admin_session\'\n}));\n\napp.use(i18n.init);\n\napp.set(\'view engine\', \'ejs\');\napp.set(\'views\', path.join(__dirname, \'views\'));\n\napp.use((req, res, next) => {\n    res.locals.user = req.session.admin;\n    res.locals.settings = getSetting();\n    next();\n});\n\napp.use(\'/admin\', setActivePage);\n\nconst { router: adminAuthRouter, adminAuth } = require(\'./routes/adminAuth\');\nconst { blockTechnicianAccess } = require(\'./middleware/technicianAccessControl\');\n\napp.use(\'/admin\', adminAuthRouter);\n\nconst adminRoutes = [\n    { path: \'/dashboard\', router: \'./routes/adminDashboard\' },\n    { path: \'/genieacs\', router: \'./routes/adminGenieacs\' },\n    { path: \'/mapping-new\', router: \'./routes/adminMappingNew\' },\n    { path: \'/mikrotik\', router: \'./routes/adminMikrotik\' },\n    { path: \'/hotspot\', router: \'./routes/adminHotspot\', subPath: true },\n    { path: \'/settings\', router: \'./routes/adminSetting\', auth: true, subPath: true, useBlock: true },\n    { path: \'/config\', router: \'./routes/configValidation\', useBlock: true },\n    { path: \'/trouble\', router: \'./routes/adminTroubleReport\', auth: true, useBlock: true },\n    { path: \'/billing\', router: \'./routes/adminBilling\', auth: true, useBlock: true },\n    { path: \'/installations\', router: \'./routes/adminInstallationJobs\', auth: true, useBlock: true },\n    { path: \'/technicians\', router: \'./routes/adminTechnicians\', auth: true, useBlock: true },\n    { path: \'/agents\', router: \'./routes/adminAgents\', auth: true, useBlock: true },\n    { path: \'/voucher-pricing\', router: \'./routes/adminVoucherPricing\', auth: true, useBlock: true },\n    { path: \'/cable-network\', router: \'./routes/adminCableNetwork\', auth: true, useBlock: true },\n    { path: \'/collectors\', router: \'./routes/adminCollectors\', useBlock: true },\n    { path: \'/cache\', router: \'./routes/cacheManagement\', useBlock: true }\n];\n\nadminRoutes.forEach(route => {\n    const router = require(route.router);\n    const args = [route.subPath ? route.path : \`/admin${route.path}\`];\n    if (route.useBlock) args.push(blockTechnicianAccess);\n    if (route.auth) args.push(adminAuth);\n    args.push(route.subPath ? router.router : router);\n    app.use.apply(app, args);\n});\n\nconst otherRoutes = [\n    { path: \'/agent\', router: \'./routes/agentAuth\', property: \'router\' },\n    { path: \'/agent\', router: \'./routes/agent\' },\n    { path: \'/payment\', router: \'./routes/payment\' },\n    { path: \'/test/trouble\', router: \'./routes/testTroubleReport\' },\n    { path: \'/customer/trouble\', router: \'./routes/troubleReport\' },\n    { path: \'/voucher\', router: \'./routes/publicVoucher\', property: \'router\' },\n    { path: \'/tools\', router: \'./routes/publicTools\' },\n    { path: \'/webhook/voucher\', router: \'./routes/publicVoucher\', property: \'router\' },\n    { path: \'/api\', router: \'./routes/apiDashboard\' },\n    { path: \'/api/search\', router: \'./routes/search\', auth: true },\n    { path: \'/\', router: \'./routes/staticIcons\' },\n    { path: \'/customer\', router: \'./routes/customerPortal\' },\n    { path: \'/customer/billing\', router: \'./routes/customerBilling\' },\n    { path: \'/technician\', router: \'./routes/technicianAuth\', property: \'router\' },\n    { path: \'/tecnico\', router: \'./routes/technicianAuth\', property: \'router\' },\n    { path: \'/technician\', router: \'./routes/technicianDashboard\' },\n    { path: \'/tecnico\', router: \'./routes/technicianDashboard\' },\n    { path: \'/technician\', router: \'./routes/technicianCableNetwork\' },\n    { path: \'/tecnico\', router: \'./routes/technicianCableNetwork\' },\n    { path: \'/collector\', router: \'./routes/collectorAuth\', property: \'router\' },\n    { path: \'/collector\', router: \'./routes/collectorDashboard\' }\n];\n\notherRoutes.forEach(route => {\n    let router = require(route.router);\n    if (route.property) router = router[route.property];\n    const args = [route.path];\n    if (route.auth) args.push(adminAuth);\n    args.push(router);\n    app.use.apply(app, args);\n});\n\napp.get(\'/\', (req, res) => {\n  res.redirect(\'/admin/login\');\n});\n\nconst PORT = getSetting(\'server_port\', 4555);\n\napp.listen(PORT, () => {\n    logger.info(`✅ Servidor iniciado na porta ${PORT}`);\n}).on(\'error\', (err) => {\n    logger.error(`❌ Erro ao iniciar o servidor: ${err.message}`);\n    process.exit(1);\n});\n\nmodule.exports = app;\n