\nconst { errorHandler, ValidationError, AuthenticationError, AuthorizationError } = require(\'./errorHandler\');\nconst { getSetting } = require(\'./settingsManager\');\nconst { logger } = require(\'./logger\');\n\nconst requireCustomerAuth = (req, res, next) => {\n  try {\n    if (!req.session || !req.session.customer || !req.session.customer.phone) {\n      throw new AuthenticationError(\'Login diperlukan untuk mengakses halaman ini\');\n    }\n    next();\n  } catch (error) {\n    next(error);\n  }\n};\n\nconst requireAdminAuth = (req, res, next) => {\n  try {\n    if (!req.session || !req.session.admin || !req.session.admin.username) {\n      throw new AuthenticationError(\'Login admin diperlukan\');\n    }\n    next();\n  } catch (error) {\n    next(error);\n  }\n};\n\nconst createRateLimit = (windowMs = 15 * 60 * 1000, max = 100) => {\n  const requests = new Map();\n  \n  return (req, res, next) => {\n    try {\n      const key = req.ip || req.connection.remoteAddress;\n      const now = Date.now();\n      const windowStart = now - windowMs;\n      \n      for (const [ip, timestamps] of requests.entries()) {\n        requests.set(ip, timestamps.filter(time => time > windowStart));\n        if (requests.get(ip).length === 0) {\n          requests.delete(ip);\n        }\n      }\n      \n      const userRequests = requests.get(key) || [];\n      if (userRequests.length >= max) {\n        const error = new ValidationError(\'Terlalu banyak permintaan. Silakan coba lagi nanti.\');\n        error.statusCode = 429;\n        throw error;\n      }\n      \n      userRequests.push(now);\n      requests.set(key, userRequests);\n      \n      next();\n    } catch (error) {\n      next(error);\n    }\n  };\n};\n\nconst validateInput = (schema) => {\n  return (req, res, next) => {\n    try {\n      const { error, value } = schema.validate(req.body);\n      if (error) {\n        throw new ValidationError(error.details[0].message, error.details[0].path[0]);\n      }\n      req.body = value;\n      next();\n    } catch (err) {\n      next(err);\n    }\n  };\n};\n\nconst validatePhoneNumber = (req, res, next) => {\n  try {\n    const { phone } = req.body;\n    \n    if (!phone) {\n      throw new ValidationError(\'Nomor telepon harus diisi\', \'phone\');\n    }\n    \n    const cleanPhone = phone.replace(/\\D/g, \'\');\n    \n    if (!cleanPhone.match(/^08[0-9]{8,13}$/)) {\n      throw new ValidationError(\'Format nomor telepon tidak valid. Gunakan format: 08xxxxxxxxxx\', \'phone\');\n    }\n    \n    req.body.phone = cleanPhone;\n    next();\n  } catch (error) {\n    next(error);\n  }\n};\n\nconst requestLogger = (req, res, next) => {\n  const start = Date.now();\n  \n  logger.info(\'Request started\', {\n    method: req.method,\n    url: req.originalUrl,\n    ip: req.ip || req.connection.remoteAddress,\n    userAgent: req.get(\'User-Agent\'),\n    userId: req.session?.customer?.phone || req.session?.admin?.username || \'anonymous\'\n  });\n  \n  const originalSend = res.send;\n  res.send = function(data) {\n    const duration = Date.now() - start;\n    logger.info(\'Request completed\', {\n      method: req.method,\n      url: req.originalUrl,\n      statusCode: res.statusCode,\n      duration: `${duration}ms`,\n      userId: req.session?.customer?.phone || req.session?.admin?.username || \'anonymous\'\n    });\n    originalSend.call(this, data);\n  };\n  \n  next();\n};\n\nconst securityHeaders = (req, res, next) => {\n  res.setHeader(\'X-Content-Type-Options\', \'nosniff\');\n  res.setHeader(\'X-Frame-Options\', \'DENY\');\n  res.setHeader(\'X-XSS-Protection\', \'1; mode=block\');\n  res.setHeader(\'Referrer-Policy\', \'strict-origin-when-cross-origin\');\n  res.setHeader(\'Permissions-Policy\', \'geolocation=(), microphone=(), camera=()\');\n  \n  if (process.env.NODE_ENV === \'production\' && req.secure) {\n    res.setHeader(\'Strict-Transport-Security\', \'max-age=31536000; includeSubDomains; preload\');\n  }\n  \n  next();\n};\n\nconst contentSecurityPolicy = (req, res, next) => {\n  const csp = [\n    \"default-src 'self'\",\n    \"script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com\",\n    \"style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com\",\n    \"font-src 'self' https://cdn.jsdelivr.net\",\n    \"img-src 'self' data: https:\",\n    \"connect-src 'self'\",\n    \"frame-ancestors 'none'\",\n    \"base-uri 'self'\",\n    \"form-action 'self'\"\n  ].join(\'; \');\n  \n  res.setHeader(\'Content-Security-Policy\', csp);\n  next();\n};\n\nconst standardizeApiResponse = (req, res, next) => {\n  res.apiSuccess = (data = null, message = \'Success\') => {\n    res.json({\n      success: true,\n      message,\n      data,\n      timestamp: new Date().toISOString()\n    });\n  };\n  \n  res.apiError = (message = \'Error\', statusCode = 500, code = \'INTERNAL_ERROR\') => {\n    res.status(statusCode).json({\n      success: false,\n      error: {\n        code,\n        message,\n        timestamp: new Date().toISOString()\n      }\n    });\n  };\n  \n  next();\n};\n\nconst sessionManager = (req, res, next) => {\n  if (!req.session) {\n    req.session = {};\n  }\n  \n  req.session.setCustomer = (customerData) => {\n    req.session.customer = customerData;\n  };\n  \n  req.session.setAdmin = (adminData) => {\n    req.session.admin = adminData;\n  };\n  \n  req.session.clearAuth = () => {\n    delete req.session.customer;\n    delete req.session.admin;\n  };\n  \n  req.session.isCustomer = () => {\n    return !!(req.session.customer && req.session.customer.phone);\n  };\n  \n  req.session.isAdmin = () => {\n    return !!(req.session.admin && req.session.admin.username);\n  };\n  \n  next();\n};\n\nconst asyncErrorBoundary = (fn) => {\n  return (req, res, next) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};\n\nconst developmentOnly = (middleware) => {\n  return (req, res, next) => {\n    if (process.env.NODE_ENV === \'development\') {\n      return middleware(req, res, next);\n    }\n    next();\n  };\n};\n\nconst productionOnly = (middleware) => {\n  return (req, res, next) => {\n    if (process.env.NODE_ENV === \'production\') {\n      return middleware(req, res, next);\n    }\n    next();\n  };\n};\n\nconst setActivePage = (req, res, next) => {\n    const pageMap = {\n        \'dashboard\': \'dashboard\',\n        \'billing/mapping-new\': \'mapping-new\',\n        \'cable-network/analytics\': \'cable-network-analytics\',\n        \'cable-network/odp\': \'cable-network-odp\',\n        \'cable-network/cables\': \'cable-network-cables\',\n        \'installations\': \'installations\',\n        \'trouble\': \'trouble\',\n        \'billing\': \'billing\',\n        \'agents\': \'agents\',\n        \'agent-registrations\': \'agent-registrations\',\n        \'technicians\': \'technicians\',\n        \'genieacs\': \'genieacs\',\n        \'mikrotik/profiles\': \'mikrotik-profiles\',\n        \'mikrotik\': \'mikrotik\',\n        \'hotspot/voucher\': \'voucher\',\n        \'mikrotik/hotspot-profiles\': \'hotspot-profiles\',\n        \'hotspot\': \'hotspot\',\n        \'settings\': \'setting\',\n        \'cache\': \'cache\'\n    };\n\n    const currentPath = req.path.substring(1);\n    res.locals.page = pageMap[currentPath] || null;\n\n    next();\n};\n\nmodule.exports = {\n  requireCustomerAuth,\n  requireAdminAuth,\n  createRateLimit,\n  validateInput,\n  validatePhoneNumber,\n  requestLogger,\n  securityHeaders,\n  contentSecurityPolicy,\n  standardizeApiResponse,\n  sessionManager,\n  asyncErrorBoundary,\n  developmentOnly,\n  productionOnly,\n  setActivePage,\n  \n  loginRateLimit: createRateLimit(15 * 60 * 1000, 5),\n  apiRateLimit: createRateLimit(15 * 60 * 1000, 100),\n  strictRateLimit: createRateLimit(15 * 60 * 1000, 10)\n};\n