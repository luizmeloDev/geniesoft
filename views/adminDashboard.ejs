
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <title>Painel Principal - Geniesoft</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
    <link href="/css/responsive-admin.css" rel="stylesheet">
    <style>
        body { background-color: #f0f2f5; }
        .main-content { padding-top: 1.5rem; }
        .card {
            border: none;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }
        /* Estilo para os novos cards de atendimento */
        .ticket-card .card-body {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 2rem;
            color: #fff;
        }
        .ticket-card h3 { font-size: 3rem; font-weight: 700; }
        .ticket-card p { font-size: 1.1rem; margin-bottom: 0; }
        
        .chart-card .card-header {
            background-color: transparent;
            border-bottom: 1px solid #dee2e6;
        }
    </style>
</head>
<body>
<div class="container-fluid">
    <div class="row">
        <%- include('partials/admin-responsive-sidebar', { page: 'dashboard', settings: settings }) %>
        
        <main class="col-md-10 ms-sm-auto main-content">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h4 class="mb-0">Painel Principal</h4>
                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="location.reload()"><i class="bi bi-arrow-clockwise me-1"></i>Atualizar</button>
            </div>

            <!-- Cartões de Estatísticas de Atendimento (MODIFICADOS) -->
            <div class="row">
                <div class="col-lg-4 col-md-6">
                    <div class="card ticket-card bg-warning">
                        <div class="card-body">
                            <p>Chamados Aguardando</p>
                            <h3>15</h3>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-md-6">
                    <div class="card ticket-card bg-info">
                        <div class="card-body">
                            <p>Em Atendimento</p>
                            <h3>8</h3>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-md-12">
                    <div class="card ticket-card bg-success">
                        <div class="card-body">
                            <p>Chamados Finalizados</p>
                            <h3>247</h3>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Gráficos de Status da Rede (MANTIDOS) -->
            <div class="row">
                <div class="col-lg-4">
                    <div class="card chart-card">
                        <div class="card-header"><h6 class="mb-0">Status dos Dispositivos GenieACS</h6></div>
                        <div class="card-body d-flex justify-content-center align-items-center">
                            <canvas id="genieacsChart" style="max-width: 280px; max-height: 280px;"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="card chart-card">
                        <div class="card-header"><h6 class="mb-0">Status de Usuários PPPoE</h6></div>
                        <div class="card-body d-flex justify-content-center align-items-center">
                            <canvas id="pppoeChart" style="max-width: 280px; max-height: 280px;"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                     <div class="card">
                         <div class="card-header"><h6 class="mb-0">Informações do Sistema</h6></div>
                         <div class="card-body">
                            <p>Esta área pode ser usada para atalhos e outras estatísticas relevantes do sistema Geniesoft.</p>
                             <a href="/admin/settings" class="btn btn-primary">Ir para Configurações</a>
                         </div>
                     </div>
                </div>
            </div>

            <!-- Gráfico de Tráfego de Internet (MANTIDO) -->
            <div class="row mt-2">
              <div class="col-md-12">
                <div class="card">
                  <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                      <div class="fw-bold"><i class="bi bi-graph-up-arrow"></i> Gráfico de Tráfego de Internet - <span id="currentInterface">...</span></div>
                      <div>
                        <label for="interfaceSelect" class="form-label me-2 mb-0">Interface:</label>
                        <select id="interfaceSelect" class="form-select form-select-sm" style="width: auto;"></select>
                      </div>
                    </div>
                    <div style="height: 250px;"><canvas id="combinedChart"></canvas></div>
                  </div>
                </div>
              </div>
            </div>
        </main>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function () {
    // Dados para os gráficos de status da rede (vindos do servidor)
    const genieacsOnline = parseInt('<%= typeof genieacsOnline !== "undefined" ? genieacsOnline : 0 %>') || 0;
    const genieacsOffline = parseInt('<%= typeof genieacsOffline !== "undefined" ? genieacsOffline : 0 %>') || 0;
    const pppoeActive = parseInt('<%= typeof mikrotikAktif !== "undefined" ? mikrotikAktif : 0 %>') || 0;
    const pppoeInactive = parseInt('<%= typeof mikrotikOffline !== "undefined" ? mikrotikOffline : 0 %>') || 0;

    const donutChartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        cutout: '70%',
        plugins: {
            legend: { position: 'bottom' },
            tooltip: { mode: 'index', intersect: false }
        }
    };

    // Gráfico GenieACS
    const genieacsCtx = document.getElementById('genieacsChart');
    if (genieacsCtx) {
        new Chart(genieacsCtx, {
            type: 'doughnut',
            data: {
                labels: ['Online', 'Offline'],
                datasets: [{
                    label: 'Dispositivos',
                    data: [genieacsOnline, genieacsOffline],
                    backgroundColor: ['#198754', '#dc3545'],
                    borderColor: '#f0f2f5',
                    borderWidth: 4
                }]
            },
            options: donutChartOptions
        });
    }

    // Gráfico PPPoE
    const pppoeCtx = document.getElementById('pppoeChart');
    if (pppoeCtx) {
        new Chart(pppoeCtx, {
            type: 'doughnut',
            data: {
                labels: ['Ativos', 'Inativos'],
                datasets: [{
                    label: 'Usuários PPPoE',
                    data: [pppoeActive, pppoeInactive],
                    backgroundColor: ['#198754', '#dc3545'],
                    borderColor: '#f0f2f5',
                    borderWidth: 4
                }]
            },
            options: donutChartOptions
        });
    }

    // Lógica do Gráfico de Tráfego (mantida)
    const maxPoints = 30;
    let currentInterface = localStorage.getItem('selectedInterface') || '';
    let combinedChart;

    function formatBandwidth(bytes) {
        if (bytes === 0) return '0 Bps';
        const k = 1000; // Usar 1000 para Kbps/Mbps
        const sizes = ['Bps', 'Kbps', 'Mbps', 'Gbps', 'Tbps'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    const trafficChartConfig = {
        type: 'line',
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: { legend: { display: true, position: 'top' } },
            scales: {
                y: { beginAtZero: true, ticks: { callback: val => formatBandwidth(val) } },
                x: { ticks: { display: false } }
            },
            elements: { point: { radius: 0 }, line: { tension: 0.4 } }
        },
        data: {
            labels: Array(maxPoints).fill(''),
            datasets: [
                { label: 'Download (RX)', data: [], borderColor: 'rgba(13,202,240,1)', backgroundColor: 'rgba(13,202,240,0.2)', fill: true },
                { label: 'Upload (TX)', data: [], borderColor: 'rgba(40,167,69,1)', backgroundColor: 'rgba(40,167,69,0.2)', fill: true }
            ]
        }
    };

    const combinedCtx = document.getElementById('combinedChart')?.getContext('2d');
    if (combinedCtx) {
        combinedChart = new Chart(combinedCtx, trafficChartConfig);
    }

    async function fetchTraffic() {
        if (!currentInterface) return;
        try {
            const res = await fetch(`/api/dashboard/traffic?interface=${encodeURIComponent(currentInterface)}`);
            if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
            const data = await res.json();
            if (data.success) {
                const datasets = combinedChart.data.datasets;
                datasets[0].data.push(data.rx);
                datasets[1].data.push(data.tx);
                if (datasets[0].data.length > maxPoints) {
                    datasets[0].data.shift();
                    datasets[1].data.shift();
                }
                combinedChart.update('none');
            }
        } catch (e) { console.error('Erro ao buscar dados de tráfego:', e); }
    }

    async function loadInterfaces() {
        try {
            const response = await fetch('/api/dashboard/interfaces');
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const data = await response.json();
            const select = document.getElementById('interfaceSelect');
            if (data.success && data.interfaces.length > 0) {
                select.innerHTML = '';
                data.interfaces.forEach(iface => {
                    const option = new Option(`${iface.name} ${iface.running ? '' : '[Down]'}`, iface.name);
                    select.add(option);
                });
                
                let savedInterface = localStorage.getItem('selectedInterface');
                if (savedInterface && data.interfaces.some(i => i.name === savedInterface)) {
                    select.value = savedInterface;
                    currentInterface = savedInterface;
                } else {
                    currentInterface = data.interfaces.find(i => i.running)?.name || data.interfaces[0].name;
                    select.value = currentInterface;
                    localStorage.setItem('selectedInterface', currentInterface);
                }
                document.getElementById('currentInterface').textContent = currentInterface;
                
                // Iniciar busca de tráfego após selecionar a interface
                setInterval(fetchTraffic, 3000);
                fetchTraffic();
            } else {
                 document.getElementById('currentInterface').textContent = "Nenhuma interface encontrada";
            }
        } catch (error) { 
            console.error('Erro ao carregar interfaces:', error);
            document.getElementById('currentInterface').textContent = "Erro ao carregar";
        }
    }
    
    $('#interfaceSelect').on('change', function() {
        currentInterface = this.value;
        localStorage.setItem('selectedInterface', currentInterface);
        document.getElementById('currentInterface').textContent = currentInterface;
        if(combinedChart) {
            combinedChart.data.datasets.forEach(dataset => dataset.data = []);
            combinedChart.update();
        }
    });

    loadInterfaces();
});
</script>
</body>
</html>
